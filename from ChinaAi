Integrating M-Pesa Daraja API into a Laravel Supermarket Platform
Comprehensive Guide from Sandbox Setup to Production

This guide will walk you through the entire process of integrating M-Pesa payments into your Laravel supermarket platform, from creating the sandbox app to testing and eventual production deployment.
1. Setting Up Your Sandbox Environment
Creating Your Sandbox App

    Log in to the M-Pesa Daraja Developer Portal

    Navigate to Sandbox > Create App

    Fill in the app details:

        App Name: supermarket_payments

        Description: "Payment integration for [Supermarket Name]"

    For API Products, select:

        ✅ Lipa Na M-Pesa Sandbox (for STK Push)

        ✅ M-Pesa Sandbox (for C2B payments)

    Click "CREATE APP"

Sandbox Credentials

After creation, you'll receive:

    Consumer Key

    Consumer Secret

    Sandbox PayBill Number (usually 174379)

    Test Passkey (for STK Push)

2. Laravel Setup
Install Required Packages
bash

composer require guzzlehttp/guzzle
composer require lcobucci/jwt

Configure Environment Variables

Add to your .env file:
ini

MPESA_ENV=sandbox
MPESA_CONSUMER_KEY=your_sandbox_consumer_key
MPESA_CONSUMER_SECRET=your_sandbox_consumer_secret
MPESA_PAYBILL=174379 # Sandbox paybill
MPESA_PASSKEY=your_sandbox_passkey
MPESA_CALLBACK_URL=https://yourdomain.com/mpesa/callback
MPESA_TIMESTAMP= # Will be generated dynamically
MPESA_AUTH_TOKEN= # Will be generated dynamically

3. Creating the M-Pesa Service Class

Create app/Services/MpesaService.php:
php

<?php

namespace App\Services;

use GuzzleHttp\Client;
use Illuminate\Support\Facades\Log;

class MpesaService
{
    protected $client;
    protected $baseUrl;
    protected $consumerKey;
    protected $consumerSecret;
    protected $paybill;
    protected $passkey;
    
    public function __construct()
    {
        $this->client = new Client();
        $this->baseUrl = config('app.mpesa_env') === 'sandbox' 
            ? 'https://sandbox.safaricom.co.ke/' 
            : 'https://api.safaricom.co.ke/';
            
        $this->consumerKey = config('app.mpesa_consumer_key');
        $this->consumerSecret = config('app.mpesa_consumer_secret');
        $this->paybill = config('app.mpesa_paybill');
        $this->passkey = config('app.mpesa_passkey');
    }
    
    /**
     * Generate access token
     */
    public function generateAccessToken()
    {
        try {
            $url = $this->baseUrl . 'oauth/v1/generate?grant_type=client_credentials';
            $response = $this->client->request('GET', $url, [
                'auth' => [$this->consumerKey, $this->consumerSecret]
            ]);
            
            $result = json_decode($response->getBody());
            return $result->access_token;
            
        } catch (\Exception $e) {
            Log::error('M-Pesa Token Generation Error: ' . $e->getMessage());
            return false;
        }
    }
    
    /**
     * STK Push - Lipa Na M-Pesa Online Payment
     */
    public function stkPush($phone, $amount, $accountReference, $transactionDesc)
    {
        $phone = $this->formatPhoneNumber($phone);
        $timestamp = date('YmdHis');
        $password = base64_encode($this->paybill . $this->passkey . $timestamp);
        
        $payload = [
            'BusinessShortCode' => $this->paybill,
            'Password' => $password,
            'Timestamp' => $timestamp,
            'TransactionType' => 'CustomerPayBillOnline',
            'Amount' => $amount,
            'PartyA' => $phone,
            'PartyB' => $this->paybill,
            'PhoneNumber' => $phone,
            'CallBackURL' => config('app.mpesa_callback_url'),
            'AccountReference' => $accountReference,
            'TransactionDesc' => $transactionDesc
        ];
        
        try {
            $url = $this->baseUrl . 'mpesa/stkpush/v1/processrequest';
            $response = $this->client->request('POST', $url, [
                'headers' => [
                    'Authorization' => 'Bearer ' . $this->generateAccessToken(),
                    'Content-Type' => 'application/json',
                ],
                'json' => $payload
            ]);
            
            return json_decode($response->getBody());
            
        } catch (\Exception $e) {
            Log::error('M-Pesa STK Push Error: ' . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Register C2B URLs
     */
    public function registerUrls()
    {
        $payload = [
            'ShortCode' => $this->paybill,
            'ResponseType' => 'Completed',
            'ConfirmationURL' => config('app.mpesa_callback_url') . '/confirmation',
            'ValidationURL' => config('app.mpesa_callback_url') . '/validation'
        ];
        
        try {
            $url = $this->baseUrl . 'mpesa/c2b/v1/registerurl';
            $response = $this->client->request('POST', $url, [
                'headers' => [
                    'Authorization' => 'Bearer ' . $this->generateAccessToken(),
                    'Content-Type' => 'application/json',
                ],
                'json' => $payload
            ]);
            
            return json_decode($response->getBody());
            
        } catch (\Exception $e) {
            Log::error('M-Pesa URL Registration Error: ' . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Format phone number to 2547XXXXXXXX
     */
    private function formatPhoneNumber($phone)
    {
        $phone = preg_replace('/\D/', '', $phone);
        
        if (substr($phone, 0, 1) === '0') {
            $phone = '254' . substr($phone, 1);
        } elseif (substr($phone, 0, 4) === '+254') {
            $phone = '254' . substr($phone, 4);
        }
        
        return $phone;
    }
}

4. Creating Routes and Controllers
Routes

Add to routes/web.php:
php

Route::prefix('mpesa')->group(function () {
    Route::post('/stk-push', [MpesaController::class, 'stkPush'])->name('mpesa.stk_push');
    Route::post('/callback', [MpesaController::class, 'callback'])->name('mpesa.callback');
    Route::post('/register-urls', [MpesaController::class, 'registerUrls'])->name('mpesa.register_urls');
});

MpesaController

Create app/Http/Controllers/MpesaController.php:
php

<?php

namespace App\Http\Controllers;

use App\Services\MpesaService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class MpesaController extends Controller
{
    protected $mpesaService;
    
    public function __construct(MpesaService $mpesaService)
    {
        $this->mpesaService = $mpesaService;
    }
    
    /**
     * Initiate STK Push request
     */
    public function stkPush(Request $request)
    {
        $request->validate([
            'phone' => 'required',
            'amount' => 'required|numeric',
            'reference' => 'required',
            'description' => 'required'
        ]);
        
        $response = $this->mpesaService->stkPush(
            $request->phone,
            $request->amount,
            $request->reference,
            $request->description
        );
        
        if ($response) {
            return response()->json([
                'success' => true,
                'message' => 'Payment request sent to your phone',
                'data' => $response
            ]);
        }
        
        return response()->json([
            'success' => false,
            'message' => 'Failed to initiate payment'
        ], 500);
    }
    
    /**
     * Handle M-Pesa callback
     */
    public function callback(Request $request)
    {
        Log::info('M-Pesa Callback: ' . json_encode($request->all()));
        
        // Process the callback data
        $callbackData = $request->all();
        
        // Extract relevant information
        $merchantRequestId = $callbackData['Body']['stkCallback']['MerchantRequestID'] ?? null;
        $checkoutRequestId = $callbackData['Body']['stkCallback']['CheckoutRequestID'] ?? null;
        $resultCode = $callbackData['Body']['stkCallback']['ResultCode'] ?? null;
        $resultDesc = $callbackData['Body']['stkCallback']['ResultDesc'] ?? null;
        
        if ($resultCode == 0) {
            // Successful payment
            $callbackMetadata = $callbackData['Body']['stkCallback']['CallbackMetadata']['Item'] ?? [];
            
            $amount = null;
            $mpesaReceiptNumber = null;
            $phoneNumber = null;
            
            foreach ($callbackMetadata as $item) {
                if ($item['Name'] == 'Amount') {
                    $amount = $item['Value'];
                } elseif ($item['Name'] == 'MpesaReceiptNumber') {
                    $mpesaReceiptNumber = $item['Value'];
                } elseif ($item['Name'] == 'PhoneNumber') {
                    $phoneNumber = $item['Value'];
                }
            }
            
            // Here you would typically:
            // 1. Find the order in your database
            // 2. Update the payment status
            // 3. Generate a receipt
            // 4. Send confirmation to the customer
            
            Log::info("Successful payment: Receipt {$mpesaReceiptNumber}, Amount {$amount}, Phone {$phoneNumber}");
        } else {
            // Failed payment
            Log::error("Payment failed: {$resultDesc}");
        }
        
        return response()->json(['status' => 'success']);
    }
    
    /**
     * Register C2B URLs
     */
    public function registerUrls()
    {
        $response = $this->mpesaService->registerUrls();
        
        if ($response) {
            return response()->json([
                'success' => true,
                'message' => 'URLs registered successfully',
                'data' => $response
            ]);
        }
        
        return response()->json([
            'success' => false,
            'message' => 'Failed to register URLs'
        ], 500);
    }
}

5. Database Setup for Payment Records

Create a migration for payments:
bash

php artisan make:migration create_mpesa_transactions_table

Edit the migration file:
php

Schema::create('mpesa_transactions', function (Blueprint $table) {
    $table->id();
    $table->string('merchant_request_id');
    $table->string('checkout_request_id');
    $table->decimal('amount', 10, 2);
    $table->string('mpesa_receipt_number')->nullable();
    $table->string('phone');
    $table->string('transaction_date')->nullable();
    $table->string('status')->default('pending'); // pending, completed, failed
    $table->text('result_desc')->nullable();
    $table->unsignedBigInteger('order_id')->nullable(); // Link to your orders table
    $table->timestamps();
});

Run the migration:
bash

php artisan migrate

6. Frontend Integration
Payment Form Example (Blade)

Create resources/views/checkout/payment.blade.php:
html

<div class="mpesa-payment-form">
    <h3>Pay with M-Pesa</h3>
    
    <form id="mpesaForm">
        @csrf
        <div class="form-group">
            <label for="phone">M-Pesa Phone Number</label>
            <input type="text" id="phone" name="phone" class="form-control" placeholder="e.g. 07XXXXXXXX" required>
            <small class="form-text text-muted">Enter your M-Pesa registered phone number</small>
        </div>
        
        <input type="hidden" name="amount" value="{{ $total }}">
        <input type="hidden" name="reference" value="ORDER-{{ $orderId }}">
        <input type="hidden" name="description" value="Payment for order #{{ $orderId }}">
        
        <button type="submit" class="btn btn-primary" id="payWithMpesa">
            <i class="fas fa-mobile-alt"></i> Pay Ksh {{ number_format($total, 2) }}
        </button>
    </form>
    
    <div id="paymentStatus" class="mt-3" style="display: none;">
        <div class="alert alert-info">
            <p>Please check your phone and enter your M-Pesa PIN to complete payment.</p>
            <p>Status: <span id="statusText">Waiting for payment...</span></p>
        </div>
    </div>
</div>

<script>
document.getElementById('mpesaForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const payButton = document.getElementById('payWithMpesa');
    const paymentStatus = document.getElementById('paymentStatus');
    const statusText = document.getElementById('statusText');
    
    payButton.disabled = true;
    payButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
    paymentStatus.style.display = 'block';
    
    fetch("{{ route('mpesa.stk_push') }}", {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({
            phone: document.getElementById('phone').value,
            amount: "{{ $total }}",
            reference: "ORDER-{{ $orderId }}",
            description: "Payment for order #{{ $orderId }}"
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            statusText.textContent = 'Payment request sent to your phone';
            
            // Poll for payment status (simplified example)
            checkPaymentStatus("{{ $orderId }}");
        } else {
            statusText.textContent = 'Error: ' + data.message;
            payButton.disabled = false;
            payButton.innerHTML = '<i class="fas fa-mobile-alt"></i> Try Again';
        }
    })
    .catch(error => {
        statusText.textContent = 'An error occurred. Please try again.';
        payButton.disabled = false;
        payButton.innerHTML = '<i class="fas fa-mobile-alt"></i> Try Again';
    });
});

function checkPaymentStatus(orderId) {
    // In a real implementation, you would poll your server
    // which would check the database for payment confirmation
    // This is a simplified example
    setTimeout(() => {
        document.getElementById('statusText').textContent = 'Payment confirmed! Redirecting...';
        window.location.href = "/order/complete/" + orderId;
    }, 15000);
}
</script>

7. Testing Your Integration
Testing STK Push in Sandbox

    Use the test phone number 254708374149

    Initiate a payment from your Laravel application

    Use the test PIN 174379 when prompted on the simulated phone

Testing C2B Payments

    Register your URLs using the registerUrls endpoint

    Simulate a C2B payment using the Daraja simulator in the developer portal

8. Moving to Production

When ready to go live:

    Apply for production credentials on the Daraja portal

    Update your .env variables:
    ini

    MPESA_ENV=production
    MPESA_CONSUMER_KEY=your_production_consumer_key
    MPESA_CONSUMER_SECRET=your_production_consumer_secret
    MPESA_PAYBILL=your_actual_paybill
    MPESA_PASSKEY=your_production_passkey

    Test thoroughly with small amounts first

    Implement proper logging and error handling

9. Additional Considerations for a Supermarket Platform

    Bulk Payments: For supplier payments, consider implementing B2B API

    Payment Reversals: Implement reversal API for refunds

    Reporting: Create daily reconciliation reports

    Security:

        Validate callback IPs (Safaricom provides a list of valid IPs)

        Implement proper authentication for all payment endpoints

    User Experience:

        Add SMS/email payment confirmations

        Provide payment history for customers

        Implement a retry mechanism for failed payments

10. Advanced Features to Consider

    Payment Splitting: For commissions or multi-party payments

    Recurring Payments: For regular customers using M-Pesa Ratiba

    USSD Integration: For customers without smartphones

    QR Code Payments: For faster checkout

This comprehensive integration will provide your supermarket platform with robust M-Pesa payment capabilities, from sandbox testing to production deployment. Remember to thoroughly test all scenarios before going live.
New chat
